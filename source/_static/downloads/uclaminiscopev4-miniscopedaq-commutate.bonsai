<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:p1="clr-namespace:OpenEphys.Bonsai.Miniscope;assembly=OpenEphys.Bonsai.Miniscope"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:port="clr-namespace:Bonsai.IO.Ports;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:UclaMiniscopeV4">
          <p1:Index>1</p1:Index>
          <p1:LedBrightness>0</p1:LedBrightness>
          <p1:Focus>0</p1:Focus>
          <p1:SensorGain>Medium</p1:SensorGain>
          <p1:FramesPerSecond>Fps15</p1:FramesPerSecond>
          <p1:LedRespectsTrigger>false</p1:LedRespectsTrigger>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Quaternion</Selector>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Commutator</Name>
        <Description>Automates commutation (using an Open Ephys Commutator) using BNO055 Quaternion data. 
Allows manual commutation by pressing the Alt+Right/Alt+Left keys.</Description>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>LButton RButton Cancel MButton XButton1 XButton2 Space Prior PageUp Next PageDown End Home Left Up Right Alt</wie:Filter>
                <wie:SuppressRepetitions>false</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>"{turn : 0.1}"</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>LButton MButton XButton1 Space Prior PageUp Home Left Alt</wie:Filter>
                <wie:SuppressRepetitions>false</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>"{turn : -0.1}"</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Timer">
                <rx:DueTime>PT0S</rx:DueTime>
                <rx:Period>PT0.1S</rx:Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Sample" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Heading</ipy:Name>
              <ipy:Description>Transform the UCLA Miniscope v4's quarternion data to heading data.</ipy:Description>
              <ipy:Script>from math import atan2
@returns(float)
def process(value):

  siny_cosp = 2 * (value.W * value.Z + value.x * value.y);
  cosy_cosp = 1 - 2 * (value.y * value.y + value.z * value.z);

  return atan2(siny_cosp, cosy_cosp)</ipy:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>AutomatedCommutatorCommand</ipy:Name>
              <ipy:Description>Transform current and previous heading data to a commutator command</ipy:Description>
              <ipy:Script>from math import pi

@returns(str)
def process(value):
  
  
  last = value.Item2

  curr = value.Item1
  a1 = curr + 2 * pi
  a2 = curr - 2 * pi
  pos = [curr, a1, a2]

  delta = [abs(x - last) for x in pos]

  p = pos[delta.index(min(delta))]

  turn = (p - last) / (2 * pi)

  return "{turn : %s}" % turn</ipy:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Merge" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="PortName" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="port:SerialWriteLine">
                <port:PortName>COM4</port:PortName>
                <port:NewLine>\r\n</port:NewLine>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="11" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="11" Label="Source2" />
            <Edge From="4" To="6" Label="Source1" />
            <Edge From="5" To="6" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="7" To="9" Label="Source1" />
            <Edge From="8" To="9" Label="Source2" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source3" />
            <Edge From="11" To="13" Label="Source1" />
            <Edge From="12" To="13" Label="Source2" />
            <Edge From="13" To="14" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>